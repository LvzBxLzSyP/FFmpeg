name: Windows MSYS2 Clang Build Reusable Workflow

on: 
  workflow_call:

env:
  globalprefix: /d/ffmpeg-build-clang

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 600  # Clang/LTO builds take longer
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup MSYS2 with Clang
      uses: msys2/setup-msys2@v2
      with:
        msystem: CLANG64
        update: true
        install: >-
          mingw-w64-clang-x86_64-toolchain
          mingw-w64-clang-x86_64-cmake
          mingw-w64-clang-x86_64-meson
          mingw-w64-clang-x86_64-ninja
          mingw-w64-clang-x86_64-nasm
          mingw-w64-clang-x86_64-yasm
          mingw-w64-clang-x86_64-pkg-config
          mingw-w64-clang-x86_64-zlib
          mingw-w64-clang-x86_64-diffutils
          mingw-w64-clang-x86_64-rav1e
          mingw-w64-clang-x86_64-libvpl
          mingw-w64-clang-x86_64-libx264
          mingw-w64-clang-x86_64-SDL2
          mingw-w64-clang-x86_64-lld
          mingw-w64-clang-x86_64-libvpl
          autoconf
          automake
          libtool
          make
          git
          curl
          wget
          unzip
          zip
          tar
          xz
          patch

    - name: Setup Clang build environment
      shell: msys2 {0}
      run: |
        mkdir -p $globalprefix

        # Clang-specific flags with Thin LTO
        CLANG_STATIC_FLAGS="-O3 -flto=thin -static -D_WIN32_WINNT=0x0601"
        CLANG_LINK_FLAGS="-static -flto=thin"
        
        {
          echo "PREFIX=$globalprefix"
          echo "CFLAGS=$CLANG_STATIC_FLAGS -I$globalprefix/include"
          echo "CXXFLAGS=$CLANG_STATIC_FLAGS -std=c++17 -I$globalprefix/include"
          echo "LDFLAGS=$CLANG_LINK_FLAGS -L$globalprefix/lib"
          echo "PKG_CONFIG_PATH=$globalprefix/lib/pkgconfig"
          echo "PATH=$globalprefix/bin:/clang64/bin:$PATH"
          echo "MAKEFLAGS=-j$(nproc)"
          echo "CCACHE_DIR=$CCACHE_DIR"
          echo "CC=clang"
          echo "CXX=clang++"
          echo "AR=$(which llvm-ar)"
          echo "RANLIB=$(which llvm-ranlib)"
          echo "NM=$(which llvm-nm)"
          echo "STRIP=$(which llvm-strip)"
        } >> $GITHUB_ENV

    - name: Cache Clang build dependencies
      uses: actions/cache@v4
      with:
        path: |
          /d/ffmpeg-build-clang
        key: ffmpeg-deps-clang-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/*.patch') }}
        restore-keys: |
          ffmpeg-deps-clang-${{ runner.os }}-

    - name: Build dependencies (Clang)
      shell: msys2 {0}
      run: |
        echo "=== 調試工具鏈 ==="
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "CFLAGS: $CFLAGS"
        echo "LDFLAGS: $LDFLAGS"
        echo "PATH: $PATH"
        
        echo "=== 檢查工具 ==="
        which clang
        which ld.lld
        clang --version
        ld.lld --version
        
        echo "=== 測試編譯 ==="
        echo "int main(){return 0;}" > test.c
        clang $CFLAGS $LDFLAGS test.c -o test.exe -v
        echo "編譯測試結果: $?"
        rm -f test.c test.exe

        # Build x265 with Clang
        if [ ! -f "$PREFIX/lib/libx265.a" ]; then
          git clone https://bitbucket.org/multicoreware/x265_git x265
          cd x265/build
          cmake -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DENABLE_SHARED=OFF \
            -DENABLE_CLI=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_DOCS=OFF \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
            -DCMAKE_CXX_IMPLICIT_LINK_LIBRARIES="stdc++;m;pthread" \
            ../source
          ninja -j$(nproc)
          ninja install
          cd ../..

          if [ -f "$PREFIX/lib/pkgconfig/x265.pc" ]; then
            echo "Before fixing:"
            cat "$PREFIX/lib/pkgconfig/x265.pc"
            sed -i 's/-l-l:/-l:/g' "$PREFIX/lib/pkgconfig/x265.pc"
            sed -i 's/-lc++/-lstdc++/g' "$PREFIX/lib/pkgconfig/x265.pc"
            echo "Fixed x265.pc:"
            cat "$PREFIX/lib/pkgconfig/x265.pc"
          fi
        fi

        # Build dav1d with Clang
        if [ ! -f "$PREFIX/lib/libdav1d.a" ]; then
          git clone --depth=1 https://code.videolan.org/videolan/dav1d.git
          cd dav1d
          meson setup build \
            --buildtype=release \
            --prefix="$PREFIX" \
            -Ddefault_library=static \
            -Denable_tools=false \
            -Denable_tests=false \
            -Dc_args="$CFLAGS" \
            -Dcpp_args="$CXXFLAGS" \
            -Dc_link_args="$LDFLAGS" \
            -Dcpp_link_args="$LDFLAGS"
          meson compile -C build -j$(nproc)
          meson install -C build
          cd ..
        fi

        # Build SVT-AV1 with Clang
        if [ ! -f "$PREFIX/lib/libSvtAv1Enc.a" ]; then
          git clone --depth=1 https://gitlab.com/AOMediaCodec/SVT-AV1.git
          cd SVT-AV1
          cmake -G "Ninja" \
            -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_APPS=OFF \
            -DBUILD_DEC=OFF \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
            .
          ninja -j$(nproc)
          ninja install
          cd ..
        fi

        # Build libaom with Clang
        if [ ! -f "$PREFIX/lib/libaom.a" ]; then
          git clone --depth=1 https://aomedia.googlesource.com/aom.git
          mkdir -p aom/build && cd aom/build
          cmake .. -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DENABLE_SHARED=OFF \
            -DENABLE_NASM=ON \
            -DENABLE_TOOLS=OFF \
            -DENABLE_EXAMPLES=OFF \
            -DENABLE_DOCS=OFF \
            -DENABLE_TESTS=OFF \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS"
          ninja -j$(nproc)
          ninja install
          cd ../..
        fi
        
        # Build libvpx
        if [ ! -f "$PREFIX/lib/libvpx.a" ]; then
          git clone --depth=1 https://chromium.googlesource.com/webm/libvpx.git
          cd libvpx
          export STRIP=:
          LDFLAGS="$LDFLAGS" ./configure \
            --prefix=$PREFIX \
            --disable-examples \
            --disable-unit-tests \
            --disable-tools \
            --disable-docs \
            --enable-vp8 \
            --enable-vp9 \
            --enable-vp9-highbitdepth \
            --enable-static \
            --disable-shared \
            --extra-cflags="$CFLAGS"
          make -j$(nproc)
          make install
          cd ..
        fi

        export STRIP=$(which llvm-strip)
        export CFLAGS="-O3 -flto=full -static -I$PREFIX/include"
        export CXXFLAGS="-O3 -flto=full -static -std=c++17 -I$PREFIX/include"
        
        # Build VVenC
        if [ ! -f "$PREFIX/lib/libvvenc.a" ]; then
          git clone --depth=1 https://github.com/fraunhoferhhi/vvenc.git
          cd vvenc
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
            -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_EXE_LINKER_FLAGS_RELEASE="$LDFLAGS" \
            -DVVENC_ENABLE_LINK_TIME_OPT=OFF \
            -G Ninja
          ninja -j$(nproc)
          ninja install
          cd ..
        fi
      
        # Build VVdeC
        if [ ! -f "$PREFIX/lib/libvvdec.a" ]; then
          git clone --depth=1 https://github.com/fraunhoferhhi/vvdec.git
          cd vvdec
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_C_FLAGS_RELEASE="$CFLAGS -Wno-nontrivial-memcall" \
            -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS -Wno-nontrivial-memcall" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_EXE_LINKER_FLAGS_RELEASE="$LDFLAGS" \
            -DVVDEC_ENABLE_LINK_TIME_OPT=OFF \
            -G Ninja
          ninja -j$(nproc)
          ninja install
          cd ..
        fi

        export CFLAGS="-O3 -flto=full -static -D_WIN32_WINNT=0x0601 -I$PREFIX/include"
        export CXXFLAGS="-O3 -flto=full -static -D_WIN32_WINNT=0x0601 -std=c++17 -I$PREFIX/include"
      
        # Build XEVE
        if [ ! -f "$PREFIX/lib/xeve/libxeve.a" ]; then
          git clone https://github.com/mpeg5/xeve.git
          cd xeve
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_EXE_LINKER_FLAGS_RELEASE="$LDFLAGS" \
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \
            .
          ninja -j$(nproc)
          cmake --install . --component Development
          cd ..
        fi
        
        # Build XEVD
        if [ ! -f "$PREFIX/lib/xevd/libxevd.a" ]; then
          git clone https://github.com/mpeg5/xevd.git
          cd xevd
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_EXE_LINKER_FLAGS_RELEASE="$LDFLAGS" \
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \
            .
          ninja -j$(nproc)
          cmake --install . --component Development
        fi

    - name: Build audio & text libraries (Clang)
      shell: msys2 {0}
      run: |
        # Build freetype with Clang
        if [ ! -f "$PREFIX/lib/libfreetype.a" ]; then
          git clone --depth=1 https://gitlab.freedesktop.org/freetype/freetype.git \
            || git clone --depth=1 https://github.com/freetype/freetype.git
          cd freetype
          mkdir -p build && cd build
          cmake .. -G "Ninja" \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DFT_DISABLE_BZIP2=TRUE \
            -DFT_DISABLE_PNG=TRUE \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" 
          ninja -j$(nproc)
          ninja install
          cd ../..
        fi
        
        # Build libmp3lame with Clang
        if [ ! -f "$PREFIX/lib/libmp3lame.a" ]; then
          wget -q https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
          tar xzf lame-3.100.tar.gz
          cd lame-3.100
          ./configure --prefix=$PREFIX --disable-shared --enable-static --disable-frontend \
            CC=clang CXX=clang++ AR=llvm-ar RANLIB=llvm-ranlib \
            CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
          make -j$(nproc)
          make install
          cd ..
        fi
        
        # Build libogg with Clang
        if [ ! -f "$PREFIX/lib/libogg.a" ];then
          git clone https://github.com/xiph/ogg.git
          cd ogg
          mkdir build && cd build
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
            -DCMAKE_C_COMPILER=clang
          ninja -j$(nproc)
          ninja install
          cd ../..
        fi
        
        # Build libflac with Clang
        if [ ! -f "$PREFIX/lib/libFLAC.a" ];then
          git clone https://github.com/xiph/flac.git
          cd flac
          mkdir build && cd build
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DINSTALL_MANPAGES=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ 
          ninja -j$(nproc)
          ninja install
          cd ../..
        fi
        
        # Build libvorbis with Clang
        if [ ! -f "$PREFIX/lib/libvorbis.a" ];then
          git clone https://github.com/xiph/vorbis.git
          cd vorbis
          mkdir build && cd build
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
            -DBUILD_SHARED_LIBS=OFF \
            -DINSTALL_MANPAGES=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++
          ninja -j$(nproc)
          ninja install
          cd ../..
        fi

        # Build fribidi with Clang
        if [ ! -f "$PREFIX/lib/libfribidi.a" ]; then
          wget https://github.com/fribidi/fribidi/releases/download/v1.0.13/fribidi-1.0.13.tar.xz
          tar xf fribidi-1.0.13.tar.xz
          cd fribidi-1.0.13
          meson setup builddir \
            --buildtype=release \
            --prefix="$PREFIX" \
            -Ddefault_library=static \
            -Ddocs=false \
            -Dc_args="$CFLAGS" 
          meson compile -C builddir -j$(nproc)
          meson install -C builddir 
          cd ..
        fi
        
        # Build harfbuzz
        if [ ! -f "$PREFIX/lib/libharfbuzz.a" ]; then
          wget https://github.com/harfbuzz/harfbuzz/releases/download/11.3.2/harfbuzz-11.3.2.tar.xz
          tar xf harfbuzz-11.3.2.tar.xz
          cd harfbuzz-11.3.2
          mkdir build && cd build
          export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DHB_HAVE_FREETYPE=ON \
            -DHB_HAVE_GLIB=OFF \
            -DHB_HAVE_GOBJECT=OFF \
            -DHB_HAVE_CAIRO=OFF \
            -DHB_HAVE_FONTCONFIG=OFF \
            -DHB_HAVE_ICU=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++
          ninja -j$(nproc)
          ninja install
          cd ../..
        fi

        # Build libass with Clang
        if [ ! -f "$PREFIX/lib/libass.a" ]; then
          git clone --depth=1 https://github.com/libass/libass.git
          cd libass
          meson setup builddir \
            --buildtype=release \
            --prefix="$PREFIX" \
            -Ddefault_library=static \
            -Dc_args="$CFLAGS" \
            -Dcpp_args="$CXXFLAGS" \
            -Dc_link_args="$LDFLAGS" \
            -Dcpp_link_args="$LDFLAGS"
          meson compile -C builddir -j$(nproc)
          meson install -C builddir
          cd ..
        fi
        
        # Build opus with Clang
        if [ ! -f "$PREFIX/lib/libopus.a" ]; then
          git clone --depth=1 https://github.com/xiph/opus.git
          cd opus
          mkdir -p build && cd build
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS"
          ninja -j$(nproc)
          ninja install
          cd ../..
        fi

        # Install NVENC headers
        if [ ! -f "$PREFIX/include/ffnvcodec/nvEncodeAPI.h" ]; then
          git clone --depth=1 https://github.com/FFmpeg/nv-codec-headers.git
          cd nv-codec-headers
          make PREFIX=$PREFIX install
          cd ..
        fi


        # Install AMF headers
        if [ ! -f "$PREFIX/include/amd/core/D3D12AMF.h" ]; then
          git clone https://github.com/GPUOpen-LibrariesAndSDKs/AMF.git
          mkdir -p "$PREFIX/include/amd/AMF"
          cp -r AMF/amf/public/include/* "$PREFIX/include/amd/AMF"
        fi

    - name: Build FFmpeg (Clang with Thin LTO)
      shell: msys2 {0}
      run: |
        git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg-clang
        cd ffmpeg-clang
        
        # Apply VVC decoder patch
        wget -q -O libvvdec.patch https://raw.githubusercontent.com/wiki/fraunhoferhhi/vvdec/data/patch/v7-0001-avcodec-add-external-dec-libvvdec-for-H266-VVC.patch
        git apply --3way libvvdec.patch || echo "Patch may have already been applied"

        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig:/clang64/lib/pkgconfig"

        # Special LTO flags for FFmpeg
        export LDFLAGS_LTO="$LDFLAGS"
        export LD=$(which ld.lld)

        ./configure \
          --prefix=$PREFIX \
          --pkg-config-flags="--static" \
          --extra-cflags="$CFLAGS -I$PREFIX/include/amd" \
          --extra-cxxflags="$CXXFLAGS -I$PREFIX/include/amd" \
          --extra-ldflags="$LDFLAGS_LTO" \
          --extra-ldexeflags="$LDFLAGS_LTO -L/d/ffmpeg-build-clang/lib/xevd -L/d/ffmpeg-build-clang/lib/xeve -Wl,--whole-archive -lc++ -Wl,--no-whole-archive -Wl,-Bstatic" \
          --extra-libs="-lpthread -lm -lz -lws2_32 -lsecur32 -lbcrypt -lwinmm -ldxguid" \
          --enable-static \
          --disable-shared \
          --disable-debug \
          --disable-doc \
          --enable-gpl \
          --enable-version3 \
          --disable-w32threads \
          --enable-pthreads \
          --enable-libx264 \
          --enable-libx265 \
          --enable-librav1e \
          --enable-libsvtav1 \
          --enable-libaom \
          --enable-libdav1d \
          --enable-libvpx \
          --enable-libvvenc \
          --enable-libvvdec \
          --enable-libxeve \
          --enable-libxevd \
          --enable-libmp3lame \
          --enable-libopus \
          --enable-libvorbis \
          --enable-libass \
          --enable-libfreetype \
          --enable-nvenc \
          --enable-nvdec \
          --enable-cuda \
          --enable-libvpl \
          --enable-sdl2 \
          --enable-ffplay \
          --enable-dxva2 \
          --enable-d3d11va \
          --enable-amf \
          --enable-schannel \
          --enable-lto \
          --cc=clang \
          --cxx=clang++ \
          --ar=llvm-ar \
          --ranlib=llvm-ranlib \
          --nm=llvm-nm \
          --strip=llvm-strip \
          --ld="clang -fuse-ld=lld" \
          --arch=x86_64 \
          --target-os=mingw32 || { cat ffbuild/config.log; exit 1; }
        make -j$(nproc)
        make install

    - name: Package Clang build
      shell: msys2 {0}
      run: |
        cd "$PREFIX"
        mkdir -p package-clang/bin
        
        cp bin/ffmpeg.exe package-clang/bin/
        cp bin/ffprobe.exe package-clang/bin/
        [ -f bin/ffplay.exe ] && cp bin/ffplay.exe package-clang/bin/
        
        # Create build info
        cat > package-clang/BUILD_INFO.txt << EOF
        FFmpeg Clang LTO Static Build Information
        ========================================
        Build Date: $(date -u)
        Compiler: Clang $(clang --version | head -n1)
        FFmpeg Version: $(./bin/ffmpeg.exe -version | head -n1)
        
        Optimization: -O3 with Thin LTO
        Linker: LLD with LTO
        Static Linking: Yes
        
        Binary Size: $(ls -lh bin/ffmpeg.exe | awk '{print $5}')
        EOF
        
        cd package-clang
        zip -9 -r ../ffmpeg-win64-clang-lto-static.zip .
      
    - name: Upload Clang build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-win64-clang-lto-static
        path: D:\ffmpeg-build-clang\ffmpeg-win64-clang-lto-static.zip
        retention-days: 7
