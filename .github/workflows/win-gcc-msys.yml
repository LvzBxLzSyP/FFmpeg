name: Windows MSYS2 GCC Build Reusable Workflow

on:
  workflow_call:

env:
  # Global build configuration
  globalprefix: /d/ffmpeg-build


jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 480
    outputs:
      tag_name: ${{ steps.tagger.outputs.tag_name }}
      release_name: ${{ steps.tagger.outputs.release_name }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-nasm
          mingw-w64-x86_64-yasm
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-zlib
          mingw-w64-x86_64-rust
          mingw-w64-x86_64-diffutils
          mingw-w64-x86_64-SDL2
          mingw-w64-x86_64-libvpl
          autoconf
          automake
          libtool
          make
          git
          curl
          wget
          unzip
          zip
          tar
          xz
          patch

    - name: Set UTC datetime tag & release name
      shell: msys2 {0}
      id: tagger
      run: |
        DATE=$(date -u +"%Y-%m-%d-%H-%M-%S")
        echo "tag_name=autobuild-${DATE}" >> $GITHUB_OUTPUT
        echo "release_name=FFmpeg Auto Build ${DATE}" >> $GITHUB_OUTPUT

    - name: Setup build environment
      shell: msys2 {0}
      run: |
        # Create build directory
        mkdir -p $globalprefix
        
        # GCC-specific flags
        STATIC_FLAGS="-O2 -static -static-libgcc -static-libstdc++ -fno-lto -D_WIN32_WINNT=0x0601"
        
        # Environment variables
        {
          echo "PREFIX=$globalprefix"
          echo "CFLAGS=$STATIC_FLAGS -I$BUILD_PREFIX/include"
          echo "CXXFLAGS=$STATIC_FLAGS -std=c++17 -I$BUILD_PREFIX/include"  
          echo "LDFLAGS=$STATIC_FLAGS -L$BUILD_PREFIX/lib"
          echo "PKG_CONFIG_PATH=$BUILD_PREFIX/lib/pkgconfig"
          echo "PATH=$BUILD_PREFIX/bin:$PATH"
          echo "MAKEFLAGS=-j$(nproc)"
          echo "CCACHE_DIR=$CCACHE_DIR"
          echo "CC=gcc"
          echo "CXX=g++"
        } >> $GITHUB_ENV

    - name: Cache GCC build dependencies
      uses: actions/cache@v4
      with:
        path: |
          /d/ccache-gcc
          /d/ffmpeg-build
        key: ffmpeg-deps-gcc-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/*.patch') }}
        restore-keys: |
          ffmpeg-deps-gcc-${{ runner.os }}-

    - name: Build dependencies
      shell: msys2 {0}
      run: |
        # Build x264
        if [ ! -f "$PREFIX/lib/libx264.a" ]; then
          echo "::group::Build libx264"
          git clone --depth=1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure --prefix=$PREFIX --enable-static --disable-opencl --disable-cli --enable-pic
          make -j$(nproc)
          make install
          cd ..
          echo ::endgroup::
        fi

        # Build x265
        if [ ! -f "$PREFIX/lib/libx265.a" ]; then
        echo "::group::Build libx265"
          git clone https://bitbucket.org/multicoreware/x265_git x265
          cd x265/build
          cmake -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DENABLE_SHARED=OFF \
            -DENABLE_CLI=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_DOCS=OFF \
            -DSTATIC_LINK_CRT=ON \
            -DCMAKE_CXX_FLAGS="-static-libgcc -static-libstdc++" \
            -DCMAKE_C_FLAGS="-static-libgcc" \
            ../source
          ninja -j$(nproc)
          ninja install
          cd ../..
          echo ::endgroup::
        fi

        # Build dav1d
        if [ ! -f "$PREFIX/lib/libdav1d.a" ]; then
          echo "::group::Build libdav1d"
          git clone --depth=1 https://code.videolan.org/videolan/dav1d.git
          cd dav1d
          meson setup build \
            --buildtype=release \
            --prefix="$PREFIX" \
            -Ddefault_library=static \
            -Denable_tools=false \
            -Denable_tests=false \
            -Dc_args="$CFLAGS"
          meson compile -C build -j$(nproc)
          meson install -C build
          cd ..
          echo ::endgroup::
        fi

        # Build SVT-AV1
        if [ ! -f "$PREFIX/lib/libSvtAv1Enc.a" ]; then
          echo "::group::Build libsvtav1"
          git clone --depth=1 https://gitlab.com/AOMediaCodec/SVT-AV1.git
          cd SVT-AV1
          cmake -G "Ninja" \
            -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_APPS=OFF \
            -DBUILD_DEC=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
            .
          ninja -j$(nproc)
          ninja install
          cd ..
          echo ::endgroup::
        fi

        # Build rav1e
        if [ ! -f "$PREFIX/lib/librav1e.a" ]; then
          echo "::group::Build librav1e"
          export PATH="/mingw64/bin:$PATH"
          export CARGO_BUILD_TARGET=x86_64-pc-windows-gnu
          git clone --depth=1 https://github.com/xiph/rav1e.git
          cd rav1e
          cargo install cargo-c --force
          cargo cinstall --release --target x86_64-pc-windows-gnu \
            --library-type staticlib \
            --prefix="$PREFIX"
          cd ..
          echo ::endgroup::
        fi

        # Build libaom
        if [ ! -f "$PREFIX/lib/libaom.a" ]; then
          echo "::group::Build libaom"
          git clone --depth=1 https://aomedia.googlesource.com/aom.git
          mkdir -p aom/build && cd aom/build
          cmake .. -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DENABLE_SHARED=OFF \
            -DENABLE_NASM=ON \
            -DENABLE_TOOLS=OFF \
            -DENABLE_EXAMPLES=OFF \
            -DENABLE_DOCS=OFF \
            -DENABLE_TESTS=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS"
          ninja -j$(nproc)
          ninja install
          cd ../..
          echo ::endgroup::
        fi

        # Build libvpx
        if [ ! -f "$PREFIX/lib/libvpx.a" ]; then
          echo "::group::Build libvpx"
          git clone --depth=1 https://chromium.googlesource.com/webm/libvpx.git
          cd libvpx
          LDFLAGS="$LDFLAGS" ./configure \
            --prefix=$PREFIX \
            --disable-examples \
            --disable-unit-tests \
            --disable-tools \
            --disable-docs \
            --enable-vp8 \
            --enable-vp9 \
            --enable-vp9-highbitdepth \
            --enable-static \
            --disable-shared \
            --extra-cflags="$CFLAGS" 
          make -j$(nproc)
          make install
          cd ..
          echo ::endgroup::
        fi

        # Build VVenC
        if [ ! -f "$PREFIX/lib/libvvenc.a" ]; then
          echo "::group::Build libvvenc"
          git clone --depth=1 https://github.com/fraunhoferhhi/vvenc.git
          export CFLAGS="-O2 -static -static-libgcc -fno-lto -I$PREFIX/include"
          export CXXFLAGS="-O2 -static -static-libgcc -static-libstdc++ -fno-lto -std=c++17 -I$PREFIX/include"
          cd vvenc
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
            -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS_RELEASE="$LDFLAGS" \
            -DVVENC_ENABLE_LINK_TIME_OPT=OFF \
            -G Ninja
          ninja -j$(nproc)
          ninja install
          cd ..
          echo ::endgroup::
        fi

        # Build VVdeC
        if [ ! -f "$PREFIX/lib/libvvdec.a" ]; then
          echo "::group::Build libvvdec"
          git clone --depth=1 https://github.com/fraunhoferhhi/vvdec.git
          export CFLAGS="-O2 -static -static-libgcc -fno-lto -I$PREFIX/include"
          export CXXFLAGS="-O2 -static -static-libgcc -static-libstdc++ -fno-lto -std=c++17 -I$PREFIX/include"
          cd vvdec
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
            -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS_RELEASE="$LDFLAGS" \
            -DVVDEC_ENABLE_LINK_TIME_OPT=OFF \
            -G Ninja
          ninja -j$(nproc)
          ninja install
          echo ::endgroup::
        fi

        # Reset variable
        STATIC_FLAGS="-O2 -static -static-libgcc -static-libstdc++ -fno-lto -D_WIN32_WINNT=0x0601"
        export CFLAGS="$STATIC_FLAGS -I$BUILD_PREFIX/include"
        export CXXFLAGS="$STATIC_FLAGS -std=c++17 -I$BUILD_PREFIX/include"

        # Build XEVE
        if [ ! -f "$PREFIX/lib/xeve/libxeve.a" ]; then
          echo "::group::Build libxeve"
          git clone https://github.com/mpeg5/xeve.git
          cd xeve
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS_RELEASE="$LDFLAGS" \
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \
            .
          ninja -j$(nproc)
          cmake --install . --component Development
          echo ::endgroup::
        fi

        # Build XEVD
        if [ ! -f "$PREFIX/lib/xevd/libxevd.a" ]; then
          echo "::group::Build libxevd"
          git clone https://github.com/mpeg5/xevd.git
          cd xevd
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS_RELEASE="$LDFLAGS" \
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \
            .
          ninja -j$(nproc)
          cmake --install . --component Development
          echo ::endgroup::
        fi
        
    - name: Build audio & text libraries (GCC)
      shell: msys2 {0}
      run: |
        # Build freetype2
        if [ ! -f "$PREFIX/lib/libfreetype.a" ]; then
          echo "::group::Build libfreetype"
          git clone --depth=1 https://gitlab.freedesktop.org/freetype/freetype.git \
            || git clone --depth=1 https://github.com/freetype/freetype.git
          cd freetype
          mkdir -p build && cd build
          cmake .. \
            -G "Ninja" \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -D FT_DISABLE_BZIP2=TRUE \
            -D FT_DISABLE_PNG=TRUE \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS"
          ninja -j$(nproc)
          ninja install
          cd ..
          echo "::endgroup::"
        fi

        # Build LAME
        if [ ! -f "$PREFIX/lib/libmp3lame.a" ]; then
          echo "::group::Build libmp3lame"
          wget https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
          tar xzf lame-3.100.tar.gz
          cd lame-3.100
          ./configure --prefix=$PREFIX --disable-shared --enable-static --disable-frontend CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
          make -j$(nproc)
          make install
          cd ..
          echo "::endgroup::"
        fi

        # Build libogg
        if [ ! -f "$PREFIX/lib/libogg.a" ];then
          git clone https://github.com/xiph/ogg.git
          cd ogg
          mkdir build && cd build
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS"
          ninja -j$(nproc)
          ninja install
          cd ../..
        fi

        # Build libflac
        if [ ! -f "$PREFIX/lib/libFLAC.a" ];then
          echo "::group::Build libFLAC"
          git clone https://github.com/xiph/flac.git
          cd flac
          mkdir build && cd build
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DINSTALL_MANPAGES=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS"
          ninja -j$(nproc)
          ninja install
          cd ../..
          echo "::endgroup::"
        fi

        # Build libvorbis
        if [ ! -f "$PREFIX/lib/libvorbis.a" ]; then
          echo "::group::Build libvorbis"
          git clone https://github.com/xiph/vorbis.git
          cd vorbis
          mkdir build && cd build
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
            -DBUILD_SHARED_LIBS=OFF \
            -DINSTALL_MANPAGES=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS"
          ninja -j$(nproc)
          ninja install
          cd ../..
        fi

        # Build fribidi
        if [ ! -f "$PREFIX/lib/libfribidi.a" ]; then
          echo "::group::Build libfribidi"
          wget https://github.com/fribidi/fribidi/releases/download/v1.0.13/fribidi-1.0.13.tar.xz
          tar xf fribidi-1.0.13.tar.xz
          cd fribidi-1.0.13
          meson setup builddir \
            --buildtype=release \
            --prefix="$PREFIX" \
            -Ddefault_library=static \
            -Ddocs=false \
            -Dc_args="$CFLAGS" 
          meson compile -C builddir -j$(nproc)
          meson install -C builddir 
          cd ..
          echo "::endgroup::"
        fi

        # Build harfbuzz
        if [ ! -f "$PREFIX/lib/libharfbuzz.a" ]; then
          wget https://github.com/harfbuzz/harfbuzz/releases/download/11.3.2/harfbuzz-11.3.2.tar.xz
          tar xf harfbuzz-11.3.2.tar.xz
          cd harfbuzz-11.3.2
          mkdir build && cd build
          export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DHB_HAVE_FREETYPE=ON \
            -DHB_HAVE_GLIB=OFF \
            -DHB_HAVE_GOBJECT=OFF \
            -DHB_HAVE_CAIRO=OFF \
            -DHB_HAVE_FONTCONFIG=OFF \
            -DHB_HAVE_ICU=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS"
          ninja -j$(nproc)
          ninja install
          cd ../..
        fi

        # Build libass
        if [ ! -f "$PREFIX/lib/libass.a" ]; then
          git clone --depth=1 https://github.com/libass/libass.git
          cd libass
          export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig
          meson setup builddir \
            --buildtype=release \
            --prefix="$PREFIX" \
            -Ddefault_library=static \
            -Dc_args="$CFLAGS" 
          meson compile -C builddir -j$(nproc)
          meson install -C builddir
          cd ..
        fi

        # Build opus
        if [ ! -f "$PREFIX/lib/libopus.a" ]; then
          git clone --depth=1 https://github.com/xiph/opus.git
          cd opus
          mkdir -p build && cd build
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS"
          ninja -j$(nproc)
          ninja install
          cd ..
        fi
        
        # Install NVENC headers
        if [ ! -f "$PREFIX/include/ffnvcodec/nvEncodeAPI.h" ]; then
          git clone --depth=1 https://github.com/FFmpeg/nv-codec-headers.git
          cd nv-codec-headers
          make PREFIX=$PREFIX install
          cd ..
        fi

        # Install AMF headers
        if [ ! -f "$PREFIX/include/amd/AMF/core/D3D12AMF.h" ]; then
          git clone https://github.com/GPUOpen-LibrariesAndSDKs/AMF.git
          mkdir -p "$PREFIX/include/amd/AMF"
          cp -r AMF/amf/public/include/* "$PREFIX/include/amd/AMF"
        fi

    - name: Build FFmpeg (GCC)
      shell: msys2 {0}
      run: |
        git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg-gcc
        cd ffmpeg-gcc

        export PATH="/mingw64/bin:$PATH"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig:/mingw64/lib/pkgconfig"
        
        # Apply VVC decoder patch
        wget -q -O libvvdec.patch https://raw.githubusercontent.com/wiki/fraunhoferhhi/vvdec/data/patch/v7-0001-avcodec-add-external-dec-libvvdec-for-H266-VVC.patch
        git apply --3way libvvdec.patch || echo "Patch may have already been applied"

        ./configure \
          --prefix=$PREFIX \
          --pkg-config-flags="--static" \
          --extra-cflags="$CFLAGS -I$PREFIX/include/amd" \
          --extra-cxxflags="$CXXFLAGS -I$PREFIX/include/amd" \
          --extra-ldflags="$LDFLAGS" \
          --extra-ldexeflags="$LDFLAGS -L/d/ffmpeg-build/lib/xevd -L/d/ffmpeg-build/lib/xeve -Wl,--whole-archive -lstdc++ -Wl,--no-whole-archive -Wl,-Bstatic" \
          --extra-libs="-lpthread -lm -lz -lws2_32 -lsecur32 -lbcrypt -lwinmm -ldxguid" \
          --enable-static \
          --disable-shared \
          --disable-debug \
          --disable-doc \
          --enable-gpl \
          --enable-version3 \
          --disable-w32threads \
          --enable-pthreads \
          --enable-libx264 \
          --enable-libx265 \
          --enable-librav1e \
          --enable-libsvtav1 \
          --enable-libaom \
          --enable-libdav1d \
          --enable-libvpx \
          --enable-libvvenc \
          --enable-libvvdec \
          --enable-libxeve \
          --enable-libxevd \
          --enable-libmp3lame \
          --enable-libopus \
          --enable-libvorbis \
          --enable-libass \
          --enable-libfreetype \
          --enable-nvenc \
          --enable-nvdec \
          --enable-cuda \
          --enable-libvpl \
          --enable-sdl2 \
          --enable-ffplay \
          --enable-dxva2 \
          --enable-d3d11va \
          --enable-amf \
          --enable-schannel \
          --arch=x86_64 \
          --target-os=mingw32 || { cat ffbuild/config.log; exit 1; }

        make -j$(nproc)
        make install

    - name: Package GCC build
      shell: msys2 {0}
      run: |
        cd "$PREFIX"
        mkdir -p package-gcc/bin
        
        cp bin/ffmpeg.exe package-gcc/bin/
        cp bin/ffprobe.exe package-gcc/bin/
        [ -f bin/ffplay.exe ] && cp bin/ffplay.exe package-gcc/bin/
        
        # Create build info
        cat > package-gcc/BUILD_INFO.txt << EOF
        FFmpeg GCC Static Build Information
        ==================================
        Build Date: $(date -u)
        Compiler: GCC $(gcc --version | head -n1)
        FFmpeg Version: $(./bin/ffmpeg.exe -version | head -n1)
        
        Optimization: -O2 (No LTO)
        Static Linking: Yes
        EOF
        
        cd package-gcc
        zip -9 -r ../ffmpeg-win64-gcc-static.zip .

    - name: Upload GCC build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-win64-gcc-static
        path: D:\ffmpeg-build\ffmpeg-win64-gcc-static.zip
        retention-days: 7
