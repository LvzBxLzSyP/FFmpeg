name: Build Ultimate Static Windows FFmpeg (Optimized)

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean

env:
  CROSS_PREFIX: x86_64-w64-mingw32
  PREFIX: /opt/ffmpeg-win64
  MAKEFLAGS: -j$(nproc)

jobs:
  build-ffmpeg-win64:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04
    
    steps:
    - name: Install system dependencies
      run: |
        apt update && apt install -y \
          autoconf automake binutils-mingw-w64 build-essential cmake \
          git libtool pkg-config texinfo yasm nasm curl unzip wget \
          mingw-w64 mingw-w64-x86-64-dev ninja-build zlib1g-dev libssl-dev \
          python3 python3-pip xz-utils zip ca-certificates

    - name: Setup build environment
      run: |
        mkdir -p $PREFIX
        echo "PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig" >> $GITHUB_ENV
        echo "CC=${CROSS_PREFIX}-gcc" >> $GITHUB_ENV
        echo "CXX=${CROSS_PREFIX}-g++" >> $GITHUB_ENV
        echo "AR=${CROSS_PREFIX}-ar" >> $GITHUB_ENV
        echo "RANLIB=${CROSS_PREFIX}-ranlib" >> $GITHUB_ENV
        echo "STRIP=${CROSS_PREFIX}-strip" >> $GITHUB_ENV
        echo "CFLAGS=-static-libgcc -static -O2" >> $GITHUB_ENV
        echo "CXXFLAGS=-static-libgcc -static-libstdc++ -static -O2" >> $GITHUB_ENV
        echo "LDFLAGS=-static-libgcc -static-libstdc++ -static -L$PREFIX/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$PREFIX/include" >> $GITHUB_ENV

    - name: Install Rust for rav1e
      run: |
        unset CC CXX AR RANLIB STRIP CFLAGS CXXFLAGS LDFLAGS
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
        . $HOME/.cargo/env
        rustup target add x86_64-pc-windows-gnu
        cargo install cargo-c
        echo "PATH=$HOME/.cargo/bin:$PATH" >> $GITHUB_ENV

    - name: Build zlib
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        wget -q https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.gz
        tar xzf zlib-1.3.1.tar.gz && cd zlib-1.3.1
        CC="$CC $CFLAGS" AR="$AR" RANLIB="$RANLIB" \
        ./configure --prefix=$PREFIX --static --cross-prefix=${CROSS_PREFIX}-
        make && make install
        cd .. && rm -rf zlib-1.3.1*

    - name: Build x264
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --depth=1 https://code.videolan.org/videolan/x264.git && cd x264
        ./configure --host=$CROSS_PREFIX --cross-prefix=${CROSS_PREFIX}- \
          --enable-static --disable-shared --disable-opencl --prefix=$PREFIX \
          --extra-cflags="$CFLAGS" --extra-ldflags="$LDFLAGS"
        make && make install
        cd .. && rm -rf x264

    - name: Build x265
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --branch stable --depth=1 https://bitbucket.org/multicoreware/x265_git x265 && cd x265/build/linux
        cmake -G "Unix Makefiles" \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_C_COMPILER="$CC" \
          -DCMAKE_CXX_COMPILER="$CXX" \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DENABLE_SHARED=OFF \
          -DSTATIC_LINK_CRT=ON \
          -DCMAKE_C_FLAGS="$CFLAGS" \
          -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
          -DCMAKE_BUILD_TYPE=Release \
          ../../source
        make && make install
        cd ../../../ && rm -rf x265

    - name: Build libaom
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --depth=1 https://aomedia.googlesource.com/aom.git && cd aom
        cd build
        cmake .. -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DENABLE_SHARED=OFF \
          -DENABLE_NASM=ON \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_C_COMPILER="$CC" \
          -DCMAKE_CXX_COMPILER="$CXX" \
          -DCMAKE_RC_COMPILER=${CROSS_PREFIX}-windres \
          -DCMAKE_C_FLAGS="$CFLAGS" \
          -DCMAKE_CXX_FLAGS="$CXXFLAGS"
        ninja && ninja install
        cd ../.. && rm -rf aom

    - name: Build libvpx
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --depth=1 https://chromium.googlesource.com/webm/libvpx.git && cd libvpx
        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ./configure \
          --target=x86_64-win64-gcc \
          --prefix=$PREFIX \
          --disable-examples --disable-unit-tests --disable-tools --disable-docs \
          --enable-vp8 --enable-vp9 --enable-vp9-highbitdepth \
          --enable-static --disable-shared --as=yasm
        make && make install
        cd .. && rm -rf libvpx

    - name: Build SVT-AV1
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --depth=1 https://gitlab.com/AOMediaCodec/SVT-AV1.git && cd SVT-AV1
        cmake -G "Unix Makefiles" \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_C_COMPILER="$CC" \
          -DCMAKE_CXX_COMPILER="$CXX" \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="$CFLAGS" \
          -DCMAKE_CXX_FLAGS="$CXXFLAGS" .
        make && make install
        cd .. && rm -rf SVT-AV1

    - name: Build rav1e
      run: |
        unset CC CXX AR RANLIB STRIP CFLAGS CXXFLAGS LDFLAGS
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        . $HOME/.cargo/env
        git clone --depth=1 https://github.com/xiph/rav1e.git && cd rav1e
        cargo cinstall --release --target x86_64-pc-windows-gnu \
          --library-type staticlib --prefix="$PREFIX"
        cd .. && rm -rf rav1e

    - name: Build freetype2
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --depth=1 https://gitlab.freedesktop.org/freetype/freetype.git && cd freetype
        ./autogen.sh
        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ./configure \
          --prefix=$PREFIX --host=$CROSS_PREFIX \
          --enable-static --disable-shared --without-harfbuzz
        make && make install
        cd .. && rm -rf freetype

    - name: Build fribidi
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        wget -q https://github.com/fribidi/fribidi/releases/download/v1.0.13/fribidi-1.0.13.tar.xz
        tar xf fribidi-1.0.13.tar.xz && cd fribidi-1.0.13
        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ./configure \
          --host=$CROSS_PREFIX --prefix=$PREFIX \
          --disable-shared --enable-static --disable-docs
        make && make install
        cd .. && rm -rf fribidi-1.0.13*

    - name: Build harfbuzz
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        wget -q https://github.com/harfbuzz/harfbuzz/releases/download/8.3.0/harfbuzz-8.3.0.tar.xz
        tar xf harfbuzz-8.3.0.tar.xz && cd harfbuzz-8.3.0
        CFLAGS="$CFLAGS -Wa,-mbig-obj" CXXFLAGS="$CXXFLAGS -Wa,-mbig-obj" ./configure \
          --host=$CROSS_PREFIX --prefix=$PREFIX \
          --disable-subset --disable-shared --enable-static \
          --with-freetype --with-glib=no --with-gobject=no \
          --with-cairo=no --with-fontconfig=no --with-icu=no
        make && make install
        cd .. && rm -rf harfbuzz-8.3.0*

    - name: Build libass
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --depth=1 https://github.com/libass/libass.git && cd libass
        ./autogen.sh
        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ./configure \
          --host=$CROSS_PREFIX --prefix=$PREFIX \
          --disable-shared --enable-static
        make && make install
        cd .. && rm -rf libass

    - name: Build libfdk-aac
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --depth=1 https://github.com/mstorsjo/fdk-aac && cd fdk-aac
        autoreconf -fiv
        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ./configure \
          --host=$CROSS_PREFIX --prefix=$PREFIX \
          --disable-shared --enable-static
        make && make install
        cd .. && rm -rf fdk-aac

    - name: Build libmp3lame
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        wget -q https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
        tar xzf lame-3.100.tar.gz && cd lame-3.100
        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ./configure \
          --host=$CROSS_PREFIX --prefix=$PREFIX \
          --disable-shared --enable-static --disable-frontend
        make && make install
        cd .. && rm -rf lame-3.100*

    - name: Build opus
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --depth=1 https://github.com/xiph/opus.git && cd opus
        ./autogen.sh
        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ./configure \
          --host=$CROSS_PREFIX --prefix=$PREFIX \
          --disable-shared --enable-static --disable-doc --disable-extra-programs
        make && make install
        cd .. && rm -rf opus

    - name: Install NVENC headers
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --depth=1 https://github.com/FFmpeg/nv-codec-headers.git && cd nv-codec-headers
        make PREFIX=$PREFIX install
        cd .. && rm -rf nv-codec-headers

    - name: Build FFmpeg
      run: |
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        git clone --depth=1 https://github.com/FFmpeg/FFmpeg ffmpeg && cd ffmpeg
        
        # Verify pkg-config setup
        echo "=== PKG-CONFIG VERIFICATION ==="
        pkg-config --list-all | grep -E "(x264|x265|vpx|opus|fdk-aac)" || echo "Some packages not found in pkg-config"
        
        # Configure with optimized flags
        ./configure \
          --target-os=mingw32 --arch=x86_64 \
          --cross-prefix=${CROSS_PREFIX}- \
          --prefix=$PREFIX \
          --pkg-config=pkg-config --pkg-config-flags="--static" \
          --enable-static --disable-shared \
          --enable-gpl --enable-version3 --enable-nonfree \
          --enable-libx264 --enable-libx265 \
          --enable-librav1e --enable-libsvtav1 --enable-libaom \
          --enable-libmp3lame --enable-libfdk-aac \
          --enable-libvpx --enable-libopus --enable-libass \
          --enable-cuda --enable-nvenc \
          --disable-doc --disable-debug --disable-w32threads \
          --enable-pthreads --enable-runtime-cpudetect \
          --extra-cflags="-I$PREFIX/include $CFLAGS" \
          --extra-cxxflags="-I$PREFIX/include $CXXFLAGS" \
          --extra-ldflags="$LDFLAGS -Wl,-Bstatic" \
          --extra-ldexeflags="-static-libgcc -static-libstdc++ -static" \
          --extra-libs="-lpthread -lm -lz -lws2_32 -lsecur32 -lbcrypt" \
          --cc="$CC" --cxx="$CXX" --ld="$CXX" \
          || (cat ffbuild/config.log && exit 1)
        
        make V=${{ inputs.debug == true && '1' || '0' }}
        make install
        
        # Verify static linking
        echo "=== DEPENDENCY CHECK ==="
        ${CROSS_PREFIX}-objdump -p $PREFIX/bin/ffmpeg.exe | grep "DLL Name" || echo "✓ Fully static binary"
        
        # Copy binaries
        cp $PREFIX/bin/ffmpeg.exe ./ffmpeg-static.exe
        cp $PREFIX/bin/ffprobe.exe ./ffprobe-static.exe
        [ -f $PREFIX/bin/ffplay.exe ] && cp $PREFIX/bin/ffplay.exe ./ffplay-static.exe || echo "ffplay not built"

    - name: Test FFmpeg build
      run: |
        echo "=== FFMPEG VERSION ==="
        wine ./ffmpeg-static.exe -version || echo "Wine test failed (expected on GitHub Actions)"
        echo "=== FILE INFO ==="
        file ./ffmpeg-static.exe
        ls -lh ./ffmpeg-static.exe ./ffprobe-static.exe

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-static-windows-x64
        path: |
          ./ffmpeg-static.exe
          ./ffprobe-static.exe
          ./ffplay-static.exe
