name: Windows MSVC Build Reusable Workflow

on: 
  workflow_call:
  workflow_dispatch:

env:
  globalprefix: D:\a\FFmpeg\msvc\
  unixprefix: /d/a/FFmpeg/msvc/

jobs:
  build:
    runs-on: windows-2025

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - shell: cmd
      run: |
        dir "C:\Program Files (x86)\Windows Kits\10\bin\rc.exe" /s /b
        exit

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-pkgconf
          mingw-w64-x86_64-7zip
          make
          git

    - name: Install ASM for Visual Studio
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://www.nasm.us/pub/nasm/releasebuilds/2.16.03/win64/nasm-2.16.03-win64.zip" -OutFile "NASM.zip"
        Invoke-WebRequest -Uri "https://github.com/ShiftMediaProject/VSNASM/releases/download/1.0/VSNASM.zip" -OutFile "VSNASM.zip"
        Expand-Archive -Path "NASM.zip" -DestinationPath ".\NASM" -Force
        Copy-Item -Path ".\NASM\nasm-2.16.03\nasm.exe" -Destination "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\nasm.exe"
        Expand-Archive -Path "VSNASM.zip" -DestinationPath ".\VSNASM" -Force
        cd VSNASM
        & ".\install_script.bat"

    - name: Set Environment Variable
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        echo PREFIX=%unixprefix%>>%GITHUB_ENV%
        echo INCLUDE=%INCLUDE%>>%GITHUB_ENV%
        echo LIB=%LIB%>>%GITHUB_ENV%
        echo CC=cl>>%GITHUB_ENV%
        echo CXX=cl>>%GITHUB_ENV%
        echo CFLAGS=-O2 -GL -MT -D_WIN32_WINNT=0x0A00 -I%globalprefix%\include >> %GITHUB_ENV%
        echo CXXFLAGS=-O2 -GL -MT -std:c++17 -I%globalprefix%\include >> %GITHUB_ENV%
        echo LDFLAGS=-LTCG -LIBPATH:%globalprefix%\lib >> %GITHUB_ENV%
        
    - name: Build Dependencies
      shell: msys2 {0}
      run: |
        mv /bin/link.exe /bin/link.exe.bk
        echo $PATH
        echo $LIB
        echo $INCLUDE
        MSVC_BASE="/c/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC"
        MSVC_VER=$(ls "$MSVC_BASE" | sort -V | tail -n1)
        MSVC_BIN="$MSVC_BASE/$MSVC_VER/bin/HostX64/x64"
        # 找到最新版本的 Windows Kits x64 rc.exe 路徑
        WIN_KITS_BASE="/c/Program Files (x86)/Windows Kits/10/bin"
        RC_PATH=$(find "$WIN_KITS_BASE" -maxdepth 2 -type d -name "10.*" | sort -V | tail -n 1)/x64
        export PATH="$MSVC_BIN:$RC_PATH:/c/Program Files/Microsoft Visual Studio/2022/Enterprise/VC:$PATH"
        echo "PATH=$MSVC_BIN:$PATH" >> $GITHUB_ENV
        echo $PATH
        echo $LIB
        echo $INCLUDE
        which cl
        which rc
        which mt
        which link
        git clone --depth=1 https://code.videolan.org/videolan/x264.git
        cd x264
        CC=cl ./configure --prefix=$PREFIX --enable-static --disable-opencl --disable-cli || cat config.log
        make -j$(nproc)
        make install
        cd ..
        
        git clone https://bitbucket.org/multicoreware/x265_git.git x265
        cd x265/build
        cmake -G Ninja \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DENABLE_SHARED=OFF \
          -DENABLE_CLI=OFF \
          -DENABLE_TESTS=OFF \
          -DENABLE_DOCS=OFF \
          -DCMAKE_C_FLAGS_RELEASE="/O2 /GL /MT" \
          -DCMAKE_CXX_FLAGS_RELEASE="/O2 /GL /MT /std:c++17" \
          -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
          ../source
        ninja
        ninja install
        cd ../..
        
        git clone https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        meson setup build \
          --buildtype=release \
          --prefix=$PREFIX \
          -Ddefault_library=static \
          -Denable_tools=false \
          -Denable_tests=false \
          -Dc_args="$CFLAGS" \
          -Dcpp_args="$CXXFLAGS" \
          -Dc_link_args="$LDFLAGS" \
          -Dcpp_link_args="$LDFLAGS"
        meson compile -C build -j $(nproc)
        meson install -C build
        cd ..

        curl -L -o rav1e-x86_64.zip https://github.com/LvzBxLzSyP/rav1e/releases/latest/download/rav1e-x86_64.zip
        7z x rav1e-x86_64.zip -o%PREFIX%
