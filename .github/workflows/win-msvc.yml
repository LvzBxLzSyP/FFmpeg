name: Windows MSVC Build Reusable Workflow

on: 
  workflow_call:
  workflow_dispatch:

env:
  GLOBAL_PREFIX: D:\a\FFmpeg\msvc
  UNIX_PREFIX: /d/a/FFmpeg/msvc

jobs:
  build:
    runs-on: windows-2025
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-pkgconf
          mingw-w64-x86_64-7zip
          mingw-w64-x86_64-nasm
          make
          git
          diffutils
          yasm

    - name: Install NASM for Visual Studio
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        
        Write-Host "Downloading NASM..."
        Invoke-WebRequest -Uri "https://www.nasm.us/pub/nasm/releasebuilds/2.16.03/win64/nasm-2.16.03-win64.zip" -OutFile "NASM.zip"
        
        Write-Host "Downloading VSNASM..."
        Invoke-WebRequest -Uri "https://github.com/ShiftMediaProject/VSNASM/releases/download/1.0/VSNASM.zip" -OutFile "VSNASM.zip"
        
        Write-Host "Extracting NASM..."
        Expand-Archive -Path "NASM.zip" -DestinationPath ".\NASM" -Force
        
        $vsPath = vswhere -latest -property installationPath
        $nasmDest = Join-Path $vsPath "VC\nasm.exe"
        Copy-Item -Path ".\NASM\nasm-2.16.03\nasm.exe" -Destination $nasmDest -Force
        
        Write-Host "Installing VSNASM..."
        Expand-Archive -Path "VSNASM.zip" -DestinationPath ".\VSNASM" -Force
        Push-Location VSNASM
        & ".\install_script.bat"
        Pop-Location
        
        Write-Host "NASM installation complete"

    - name: Setup MSVC Environment
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        
        # Find vcvars64.bat using vswhere
        $vsPath = vswhere -latest -property installationPath
        $vcvarsPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvars64.bat"
        
        # Create a batch file to capture environment
        $batchScript = @"
        @echo off
        call "$vcvarsPath"
        set
        "@
        
        $batchScript | Out-File -FilePath "setup_env.bat" -Encoding ASCII
        
        # Run batch and parse environment
        $output = & cmd /c "setup_env.bat"
        
        foreach ($line in $output) {
            if ($line -match '^([^=]+)=(.*)$') {
                $name = $matches[1]
                $value = $matches[2]
                
                # Add important variables to GITHUB_ENV
                if ($name -in @('INCLUDE', 'LIB', 'PATH', 'LIBPATH')) {
                    "$name=$value" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                }
            }
        }
        
        # Add custom build flags
        "CC=cl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "CXX=cl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "PREFIX=$env:UNIX_PREFIX" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "CFLAGS=-O2 -GL -MD -D_WIN32_WINNT=0x0A00 -I$env:GLOBAL_PREFIX\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "CXXFLAGS=-O2 -GL -MD -std:c++17 -I$env:GLOBAL_PREFIX\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "LDFLAGS=-LTCG -LIBPATH:$env:GLOBAL_PREFIX\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.GLOBAL_PREFIX }}
        key: msvc-deps-${{ hashFiles('.github/workflows/**') }}
        restore-keys: |
          msvc-deps-

    - name: Build All Dependencies and FFmpeg
      shell: msys2 {0}
      run: |
        set -e
        
        # Backup MSYS2 link.exe to avoid conflict with MSVC link.exe
        if [ -f /bin/link.exe ]; then
          mv /bin/link.exe /bin/link.exe.bk
        fi
        
        # Setup MSVC paths - find the latest version dynamically
        MSVC_BASE="/c/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC"
        if [ ! -d "$MSVC_BASE" ]; then
          echo "Error: MSVC not found at $MSVC_BASE"
          exit 1
        fi
        
        MSVC_VER=$(ls "$MSVC_BASE" | sort -V | tail -n1)
        MSVC_BIN="$MSVC_BASE/$MSVC_VER/bin/HostX64/x64"
        
        # Find Windows Kits RC.exe
        WIN_KITS_BASE="/c/Program Files (x86)/Windows Kits/10/bin"
        RC_PATH=$(find "$WIN_KITS_BASE" -maxdepth 2 -type d -name "10.*" 2>/dev/null | sort -V | tail -n 1)/x64

        MSBUILD_PATH="/c/Program Files/Microsoft Visual Studio/2022/Enterprise/MSBuild/Current/Bin"
        
        # Add MSVC to PATH
        export PATH="$MSVC_BIN:$MSBUILD_PATH:$RC_PATH:/c/Program Files/Microsoft Visual Studio/2022/Enterprise/VC:$PATH"

        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
        
        # Verify compilers are available
        echo "Checking for cl.exe..."
        which cl.exe || (echo "cl.exe not found in PATH"; exit 1)
        
        # Set compiler explicitly for CMake
        export CC="cl.exe"
        export CXX="cl.exe"
        
        # Build x264
        echo "==========================="
        echo "Building x264..."
        echo "==========================="
        git clone https://code.videolan.org/videolan/x264.git
        cd x264
        
        ./configure \
          --prefix=$PREFIX \
          --enable-static \
          --disable-opencl \
          --disable-cli \
          --extra-cflags="$CFLAGS" \
          --extra-ldflags="$LDFLAGS" || (cat config.log && exit 1)
        
        make -j$(nproc)
        make install
        cd ..
        
        # Build x265
        echo "==========================="
        echo "Building x265..."
        echo "==========================="
        git clone https://bitbucket.org/multicoreware/x265_git.git x265
        cd x265/build
        
        cmake -G Ninja \
          -DCMAKE_C_COMPILER=cl.exe \
          -DCMAKE_CXX_COMPILER=cl.exe \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DENABLE_SHARED=OFF \
          -DENABLE_CLI=OFF \
          -DENABLE_TESTS=OFF \
          -DENABLE_DOCS=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="$CFLAGS" \
          -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
          -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
          ../source
        
        ninja -j$(nproc)
        ninja install
        cd ../..
        
        # Build dav1d
        echo "==========================="
        echo "Building dav1d..."
        echo "==========================="
        git clone https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        
        meson setup build \
          --buildtype=release \
          -Db_vscrt=md \
          --prefix=$PREFIX \
          -Ddefault_library=static \
          -Denable_tools=false \
          -Denable_tests=false \
          -Dc_args="$CFLAGS" \
          -Dcpp_args="$CXXFLAGS" \
          -Dc_link_args="$LDFLAGS" \
          -Dcpp_link_args="$LDFLAGS"
        
        meson compile -C build -j$(nproc)
        meson install -C build
        cd ..
        
        # Install rav1e
        echo "==========================="
        echo "Installing rav1e..."
        echo "==========================="
        curl -L -o rav1e-x86_64.zip https://github.com/LvzBxLzSyP/rav1e/releases/latest/download/rav1e-x86_64.zip
        7z x rav1e-x86_64.zip -o$PREFIX -y
        
        # Build SVT-AV1
        echo "==========================="
        echo "Building SVT-AV1..."
        echo "==========================="
        git clone https://gitlab.com/AOMediaCodec/SVT-AV1.git
        cd SVT-AV1/Build
        
        cmake -G Ninja \
          -DCMAKE_C_COMPILER=cl.exe \
          -DCMAKE_CXX_COMPILER=cl.exe \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DBUILD_SHARED_LIBS=OFF \
          -DBUILD_APPS=OFF \
          -DBUILD_DEC=OFF \
          -DBUILD_TESTING=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="$CFLAGS" \
          -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
          -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
          ..
        
        ninja -j$(nproc)
        ninja install
        cd ../..

        git clone https://chromium.googlesource.com/webm/libvpx
        cd libvpx
        wget https://raw.githubusercontent.com/LvzBxLzSyP/FFmpeg/refs/heads/master/.github/patches/0002-fix-msvc-warning-error-args.patch
        git apply 0002-fix-msvc-warning-error-args.patch
        mkdir -p builddir
        cd builddir
        LDFLAGS="$LDFLAGS" ../configure \
          --prefix=$PREFIX \
          --disable-examples \
          --disable-unit-tests \
          --disable-tools \
          --disable-docs \
          --enable-vp8 \
          --enable-vp9 \
          --enable-vp9-highbitdepth \
          --enable-static \
          --disable-shared \
          --extra-cflags="$CFLAGS" \
          --target=x86_64-win64-vs17 || { cat config.log; exit 1; }
        make -j$(nproc)
        make install

        echo "==========================="
        echo "Normalizing library naming for MSVC..."
        echo "==========================="
        # Create a standard naming scheme: libname.lib (without lib prefix)
        # This handles all the different naming conventions
        
        cd $PREFIX/lib
        
        # x264: libx264.lib -> also create x264.lib
        [ -f libx264.lib ] && ! [ -f x264.lib ] && ln -sf libx264.lib x264.lib && echo "Created x264.lib"
        
        # x265: x265-static.lib -> x265.lib
        [ -f x265-static.lib ] && ! [ -f x265.lib ] && ln -sf x265-static.lib x265.lib && echo "Created x265.lib"
        
        # dav1d: libdav1d.a -> dav1d.lib
        [ -f libdav1d.a ] && ! [ -f dav1d.lib ] && cp libdav1d.a dav1d.lib && echo "Created dav1d.lib"
        
        # rav1e might be rav1e.dll.lib
        [ -f rav1e.dll.lib ] && ! [ -f rav1e.lib ] && ln -sf rav1e.dll.lib rav1e.lib && echo "Created rav1e.lib"
        
        # SVT-AV1 might have different variations
        [ -f libSvtAv1Enc.a ] && ! [ -f SvtAv1Enc.lib ] && cp libSvtAv1Enc.a SvtAv1Enc.lib && echo "Created SvtAv1Enc.lib"
        
        # Build FFmpeg
        echo "==========================="
        echo "Building FFmpeg..."
        echo "==========================="
        git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg
        cd ffmpeg
        
        echo "Configuring FFmpeg..."
        ./configure \
          --prefix=$PREFIX \
          --toolchain=msvc \
          --enable-gpl \
          --enable-version3 \
          --disable-doc \
          --disable-debug \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libdav1d \
          --enable-librav1e \
          --enable-libsvtav1 \
          --extra-cflags="$CFLAGS" \
          --extra-cxxflags="$CXXFLAGS" \
          --extra-ldflags="$LDFLAGS" \
          --toolchain=msvc || (cat ffbuild/config.log && exit 1)
        
        echo "Building FFmpeg..."
        make -j$(nproc)
        make install
        
        echo "==========================="
        echo "Build complete!"
        echo "==========================="

    - name: Package Artifacts
      shell: pwsh
      run: |
        $artifactPath = "ffmpeg-msvc-build"
        
        if (Test-Path $env:GLOBAL_PREFIX) {
            Compress-Archive -Path "$env:GLOBAL_PREFIX\*" -DestinationPath "$artifactPath.zip"
            Write-Host "Created artifact: $artifactPath.zip"
        } else {
            Write-Error "Build prefix not found: $env:GLOBAL_PREFIX"
            exit 1
        }

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-msvc-x64
        path: ffmpeg-msvc-build.zip
        retention-days: 7

    - name: Verify Build
      shell: pwsh
      run: |
        $ffmpegExe = Join-Path $env:GLOBAL_PREFIX "bin\ffmpeg.exe"
        
        if (Test-Path $ffmpegExe) {
            Write-Host "FFmpeg executable found!"
            & $ffmpegExe -version
        } else {
            Write-Error "FFmpeg executable not found at: $ffmpegExe"
            exit 1
        }
