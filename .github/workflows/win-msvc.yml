name: Windows MSVC Build Reusable Workflow

on: 
  workflow_call:
  workflow_dispatch:

env:
  globalprefix: D:\a\FFmpeg\msvc\

jobs:
  build:
    runs-on: windows-2025

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-make
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-pkgconf
          git

    - name: Install ASM for Visual Studio
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://www.nasm.us/pub/nasm/releasebuilds/2.16.03/win64/nasm-2.16.03-win64.zip" -OutFile "NASM.zip"
        Invoke-WebRequest -Uri "https://github.com/ShiftMediaProject/VSNASM/releases/download/1.0/VSNASM.zip" -OutFile "VSNASM.zip"
        Expand-Archive -Path "NASM.zip" -DestinationPath ".\NASM" -Force
        Copy-Item -Path ".\NASM\nasm-2.16.03\nasm.exe" -Destination "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\nasm.exe"
        Expand-Archive -Path "VSNASM.zip" -DestinationPath ".\VSNASM" -Force
        cd VSNASM
        & ".\install_script.bat"

    - name: Set Environment Variable
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        :: 將環境變數轉換為 MSYS2 可以讀的形式
        set MSYS2_PATH=%PATH:C:\=/c/% 
        set MSYS2_PATH=%MSYS2_PATH:;=:%
        set MSYS2_PATH=%MSYS2_PATH:\=/%
        set MSYS2_INCLUDE=%INCLUDE:C:\=/c/% 
        set MSYS2_INCLUDE=%MSYS2_INCLUDE:;=:%
        set MSYS2_INCLIDE=%MSYS2_INCLUDE:\=/%
        set MSYS2_LIB=%LIB:C:\=/c/% 
        set MSYS2_LIB=%MSYS2_LIB:;=:%
        set MSYS2_LIB=%MSYS2_LIB:\=/%
        echo %MSYS2_PATH% > winpath.txt
        echo INCLUDE=%MSYS2_INCLUDE%>>%GITHUB_ENV%
        echo LIB=%MSYS2_LIB%>>%GITHUB_ENV%
        echo CC=cl>>%GITHUB_ENV%
        echo CXX=cl>>%GITHUB_ENV%

    - name: Build Dependencies
      shell: msys2 {0}
      run: |
        mv /bin/link.exe /bin/link.exe.bk
        echo $PATH
        echo $LIB
        echo $INCLUDE
        WIN_PATH=$(cat winpath.txt)
        export PATH="$PATH:$WIN_PATH"
        export LIB="$LIB"
        export INCLUDE="$INCLUDE"
        echo $PATH
        echo $LIB
        echo $INCLUDE
        git clone --depth=1 https://code.videolan.org/videolan/x264.git
        cd x264
        CC=cl ./configure --prefix=$PREFIX --enable-static --disable-opencl --disable-cli || cat config.log
        make -j$(nproc)
        make install
        cd ..

        cd ../..
        git clone https://bitbucket.org/multicoreware/x265_git.git x265
        cd x265/build
        cmake -G Ninja ^
          -DCMAKE_INSTALL_PREFIX=%PREFIX% ^
          -DENABLE_SHARED=OFF ^
          -DENABLE_CLI=OFF ^
          -DENABLE_TESTS=OFF ^
          -DENABLE_DOCS=OFF ^
          -DCMAKE_C_FLAGS_RELEASE="/O2 /GL /MT" ^
          -DCMAKE_CXX_FLAGS_RELEASE="/O2 /GL /MT /std:c++17" ^
          ../source
        ninja
        ninja install
        cd ../..
        
        git clone https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        meson setup build ^
          --buildtype=release ^
          --prefix=%PREFIX% ^
          -Ddefault_library=static ^
          -Denable_tools=false ^
          -Denable_tests=false ^
          -Dc_args="%CFLAGS%" ^
          -Dcpp_args="%CXXFLAGS%" ^
          -Dc_link_args="%LDFLAGS%" ^
          -Dcpp_link_args="%LDFLAGS%"
        meson compile -C build -j %NUMBER_OF_PROCESSORS%
        meson install -C build
        cd ..

        curl -L -o rav1e-x86_64.zip https://github.com/LvzBxLzSyP/rav1e/releases/latest/download/rav1e-x86_64.zip
        7z x rav1e-x86_64.zip -o%PREFIX%
